#!/bin/env bash

PGNAME="tman-pgm"
VERSION="v0.0.1"
COMMAND=
TASKDIR=
PGNDIR=
BRDNAME=
PRJNAME=
TASKNAME=
ISDEBUG=false

# TODO: add option for config path on CLI
CONFIG_FILE=

function _check_args()
{
    # TODO: check board name when support is added
    if [ -z "$PGNDIR" ]; then
        elog "no plugin directory is passed"
        exit 1
    elif [ -z "$TASKDIR" ]; then
        elog "no task directory is passed"
        exit 1
    fi
}

function find_config()
{
    declare -a cfgs=(
        "$HOME/.tman/pgn/pgm.json"
        "$HOME/.config/tman/pgn/pgm.json"
    )

    for cfg in "${cfgs[@]}"; do
        if [ -f "$cfg" ]; then
            CONFIG_FILE="$cfg"
            break
        fi
    done
}

function elog()
{
    echo "$PGNAME:" "$@" >&2
}

function dlog()
{
    if [ "$ISDEBUG" == true ]; then
        echo "$PGNAME:" "$@"
    fi
}

function _pgm_init()
{
    find_config
}


function usage()
{
    cat << EOF
Usage: tman pgm COMMAND [OPTION]... [ARGS]...
    Tman plugin manager

    COMMAND list:
      add       install plugin
      del       delete plugin
      help      show this help message and exit
      list      list plugins and statuses
      sync      update plugin (pull changes from remote repo)
      ver       show version and exit

    Use 'tman pgm help COMMAND' to get help on command
EOF
}

function _help_add()
{
    cat << EOF
Usage: tman pgm add [OPTION]... [URL]...
    Install a plugin via URL or from config file

    Arguments:
        URL     repo URL

    Exit status:
    under development
EOF
    return 0
}

function pgm_help()
{
    local command="$1"
    declare -a commands=("add" "del" "help" "list" "ver")

    for cmd in "${commands[@]}"; do
        if [ "$cmd" = "$command" ]; then
            eval "_help_$cmd"
            return
        fi
    done
    usage
}

# TODO: add option -f : delete and reinstall plugin again
# TODO: compile/install each plugin if needed
# TODO: Add support to pass repo URL as an option
function pgm_add()
{
    declare -A repocfg

    [ -z "$CONFIG_FILE" ] && exit 0
    REPOS="$(jq -c ".repos[]" "$CONFIG_FILE")"

    while read -r repo; do
        while IFS="=" read -r key val; do
            [[ -n "$key" ]] && repocfg["$key"]="$val"  # Skip empty lines
            #echo "-- pgnunits: $key -> $val"
        done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' <<< "$repo")
        repocfg["name"]="$(basename ${repocfg["link"]} ".git")"
        repocfg["name"]=${repocfg["name"]#tman-}

        # check if repo is already cloned
        if [ -d "$PGNDIR/${repocfg["name"]}" ]; then
            echo "${repocfg["name"]}[OK]: repo already cloned"
        else
            if git clone -q --recursive "${repocfg["link"]}" "$PGNDIR/${repocfg["name"]}" 2>/dev/null; then
                echo "${repocfg["name"]}[OK]: repo is cloned"
            else
                echo "${repocfg["name"]}[ERR]: no such repo '${repocfg["link"]}'"
            fi
        fi
    done <<< "$REPOS"
}

function pgm_del()
{
    local pgname="$1"

    printf "Are you sure to delete pluign in %s? [y/N] " "$PGNDIR/$pgname"
    read -r choice
    if [ "$choice" != "Y" ] && [ "$choice" != "y" ] && [ "$choice" != "yes" ]; then
        echo "plugin deletion is canceled"
        exit 1
    fi

    if [ -z "$pgname" ]; then
        elog "no plugin is provided. Try 'pgm help' for more info"
        exit 1
    elif [ ! -d "$PGNDIR/$pgname" ]; then
        elog "$pgname: no such plugin. Try 'pgm help' for more info"
        exit 1
    else
        echo "delete plugin in $PGNDIR/$pgname"
        rm -rf "$PGNDIR/$pgname"
    fi
}

# TODO: add stutus: repo is cloned or not
function pgm_list()
{
    find "$PGNDIR/" -maxdepth 1 -type d ! -path "$PGNDIR/" | while read -r pgn; do
        local name="${pgn##*/}"
        local desc="tman plugin"

        [ -s "$PGNDIR/$name/desc" ] && desc="$(cat "$PGNDIR/$name/desc")"
        printf "%-6s - %s\n" "$name" "$desc"
    done
}

# TODO: Add support for plugin update
# TODO: handle pull conflicts
function pgm_sync()
{
    declare -A repocfg

    [ -z "$CONFIG_FILE" ] && exit 0
    REPOS="$(jq -c ".repos[]" "$CONFIG_FILE")"
    while read -r repo; do
        while IFS="=" read -r key val; do
            [[ -n "$key" ]] && repocfg["$key"]="$val"  # Skip empty lines
            #echo "-- pgnunits: $key -> $val"
        done < <(jq -r 'to_entries[] | "\(.key)=\(.value)"' <<< "$repo")
        repocfg["name"]="$(basename ${repocfg["link"]} ".git")"
        repocfg["name"]=${repocfg["name"]#tman-}
        #git pull origin -q "${repocfg["link"]}" "$PGNDIR/${repocfg["name"]}" 2>/dev/null
    done <<< "$REPOS"
}

function pgm_ver()
{
    echo "$PGNAME: $VERSION"
}


OPTS=$(getopt -o b:d:i:p:P:T:h --long board:,debug:prj:,taskid:,pgndir:,taskdir:help -n "$PGNAME" -- "$@")
if [ $? -ne 0 ]; then
    #echo "error parsing options" >&2
    exit
fi

## Reset the positional parameters to the parsed options
eval set -- "$OPTS"

while true; do
    case "$1" in
        -b)
            BRDNAME="$2"
            shift 2
            ;;
        -d)
            ISDEBUG="$2"
            shift 2
            ;;
        -i)
            TASKNAME="$2"
            shift 2
            ;;
        -p)
            PRJNAME="$2"
            shift 2
            ;;
        -P)
            PGNDIR="$2"
            shift 2
            ;;
        -T)
            TASKDIR="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "$PGNAME: invalid option '$1'" >&2
            exit 1
    esac
done

COMMAND="$1"; shift 1


_check_args
find_config
[ -f "$CONFIG_FILE" ] && jq empty "$CONFIG_FILE" || exit 1

if [ "$COMMAND" = "add" ]; then
    pgm_add "$@"
elif [ "$COMMAND" = "del" ]; then
    pgm_del "$@"
elif [ "$COMMAND" = "help" ]; then
    pgm_help "$@"
elif [ -z "$COMMAND" ] || [ "$COMMAND" = "list" ]; then
    pgm_list "$@"
elif [ "$COMMAND" = "sync" ]; then
    pgm_sync "$@"
elif [ "$COMMAND" = "ver" ]; then
    pgm_ver "$@"
else
    elog "'$COMMAND': no such command"
fi
